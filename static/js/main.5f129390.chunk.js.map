{"version":3,"sources":["components/Header.js","components/Search.js","components/Country.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","text","Search","useState","searchValue","setSearchValue","resetInputField","callSearchFunction","e","preventDefault","target","value","search","onChange","type","onClick","Country","country","src","flag","alt","name","width","loading","region","capital","population","App","setLoading","errorMessage","setErrorMessage","countries","setCountries","key","list","filteredCountries","setFilteredCountries","useEffect","a","fetch","response","json","jsonResponse","message","console","log","fetchData","countryList","filter","toLowerCase","includes","length","map","numericCode","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"+UAUeA,EARA,SAACC,GACf,OACC,4BAAQC,UAAU,cACjB,4BAAKD,EAAME,QC0CCC,EA7CA,SAACH,GAAW,IAAD,EACaI,mBAAS,IADtB,mBAClBC,EADkB,KACLC,EADK,KAOnBC,EAAkB,WACvBD,EAAe,KAGVE,EAAqB,SAACC,GAC3BA,EAAEC,iBACqB,UAAnBD,EAAEE,OAAOC,QACZL,IACAP,EAAMa,OAAOR,IAEdL,EAAMa,OAAOR,GACbE,KAGD,OACC,0BAAMN,UAAU,UACf,2BACCA,UAAU,aACVW,MAAOP,EACPS,SAvB8B,SAACL,GACjCH,EAAeG,EAAEE,OAAOC,QAuBtBG,KAAK,SAEN,2BACCd,UAAU,cACVe,QAASR,EACTO,KAAK,SACLH,MAAM,WAEP,2BACCX,UAAU,gBACVe,QAASR,EACTO,KAAK,SACLH,MAAM,YChBKK,G,MAtBC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAClB,OACC,yBAAKjB,UAAU,gBACd,yBAAKA,UAAU,cACd,yBACCkB,IAAKD,EAAQE,KACbC,IAAG,UAAKH,EAAQI,KAAb,SACHC,MAAM,MACNC,QAAQ,SAET,4BAAKN,EAAQI,OAEd,yBAAKrB,UAAU,aACd,gDACA,sCAAYiB,EAAQO,QACpB,uCAAaP,EAAQQ,SACrB,0CAAgBR,EAAQS,gB,MCgDbC,MAzDf,WAAgB,IAAD,EACgBxB,oBAAS,GADzB,mBACPoB,EADO,KACEK,EADF,OAE0BzB,mBAAS,MAFnC,mBAEP0B,EAFO,KAEOC,EAFP,OAGoB3B,mBAAS,IAH7B,mBAGP4B,EAHO,KAGIC,EAHJ,OAIoC7B,mBAAS,CAC1D8B,IAAK,GACLC,KAAM,KANO,mBAIPC,EAJO,KAIYC,EAJZ,KAiCd,OAxBAC,qBAAU,YACM,uCAAG,8BAAAC,EAAA,+EAEKC,MAdC,wCAYN,cAEZC,EAFY,gBAGSA,EAASC,OAHlB,OAGZC,EAHY,OAIhBV,EAAaU,GACbN,EAAqB,CAAEH,IAAK,GAAIC,KAAMQ,IACtCd,GAAW,GANK,kDAQhBE,EAAgB,KAAMa,SACtBC,QAAQC,IAAR,MATgB,0DAAH,qDAafC,KACE,IAUF,yBAAK9C,UAAU,OACd,kBAAC,EAAD,CAAQC,KAAK,sBACb,kBAAC,EAAD,CAAQW,OAVK,SAACR,GACf,IAAI2C,EAAchB,EAAUiB,QAAO,SAAC/B,GAAD,OAClCA,EAAQI,KAAK4B,cAAcC,SAAS9C,EAAY6C,kBAEjDb,EAAqB,CAAEH,IAAK7B,EAAa8B,KAAMa,IAC/CjB,EAAgB,SAMf,uBAAG9B,UAAU,aACXmC,GAA+C,KAA1BA,EAAkBF,IAAvC,kBACaF,EAAUoB,OADvB,uDAEoChB,EAAkBF,IAFtD,qBAIF,yBAAKjC,UAAU,aACbuB,IAAYM,EACZ,4CACGA,EACH,yBAAK7B,UAAU,gBAAgB6B,GAE/BM,EAAkBD,KAAKkB,KAAI,SAACnC,GAAD,OAC1B,kBAAC,EAAD,CAASgB,IAAKhB,EAAQoC,YAAapC,QAASA,UC/C9BqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAM5B,c","file":"static/js/main.5f129390.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = (props) => {\n\treturn (\n\t\t<header className=\"App-header\">\n\t\t\t<h2>{props.text}</h2>\n\t\t</header>\n\t)\n}\n\nexport default Header\n","import React, { useState } from 'react'\n\nconst Search = (props) => {\n\tconst [searchValue, setSearchValue] = useState('')\n\n\tconst handleSearchInputChanges = (e) => {\n\t\tsetSearchValue(e.target.value)\n\t}\n\n\tconst resetInputField = () => {\n\t\tsetSearchValue('')\n\t}\n\n\tconst callSearchFunction = (e) => {\n\t\te.preventDefault()\n\t\tif (e.target.value === 'RESET') {\n\t\t\tresetInputField()\n\t\t\tprops.search(searchValue)\n\t\t}\n\t\tprops.search(searchValue)\n\t\tresetInputField()\n\t}\n\n\treturn (\n\t\t<form className=\"search\">\n\t\t\t<input\n\t\t\t\tclassName=\"text-input\"\n\t\t\t\tvalue={searchValue}\n\t\t\t\tonChange={handleSearchInputChanges}\n\t\t\t\ttype=\"text\"\n\t\t\t/>\n\t\t\t<input\n\t\t\t\tclassName=\"btn primary\"\n\t\t\t\tonClick={callSearchFunction}\n\t\t\t\ttype=\"submit\"\n\t\t\t\tvalue=\"SEARCH\"\n\t\t\t/>\n\t\t\t<input\n\t\t\t\tclassName=\"btn secondary\"\n\t\t\t\tonClick={callSearchFunction}\n\t\t\t\ttype=\"submit\"\n\t\t\t\tvalue=\"RESET\"\n\t\t\t/>\n\t\t</form>\n\t)\n}\n\nexport default Search\n","import React from 'react'\nimport '../styles/components/country.css'\n\nconst Country = ({ country }) => {\n\treturn (\n\t\t<div className=\"country card\">\n\t\t\t<div className=\"face front\">\n\t\t\t\t<img\n\t\t\t\t\tsrc={country.flag}\n\t\t\t\t\talt={`${country.name} flag`}\n\t\t\t\t\twidth=\"200\"\n\t\t\t\t\tloading=\"lazy\"\n\t\t\t\t/>\n\t\t\t\t<h2>{country.name}</h2>\n\t\t\t</div>\n\t\t\t<div className=\"face back\">\n\t\t\t\t<h2>More information</h2>\n\t\t\t\t<p>Region: {country.region}</p>\n\t\t\t\t<p>Capital: {country.capital}</p>\n\t\t\t\t<p>Population: {country.population}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Country\n","import React, { useState, useEffect } from 'react'\n// Componentes imports\nimport Header from './Header'\nimport Search from './Search'\nimport Country from './Country'\n// Styles imports\nimport '../styles/App.css'\n\nconst COUNTRIES_API_URL = 'https://restcountries.eu/rest/v2/all'\n\nfunction App() {\n\tconst [loading, setLoading] = useState(true)\n\tconst [errorMessage, setErrorMessage] = useState(null)\n\tconst [countries, setCountries] = useState([])\n\tconst [filteredCountries, setFilteredCountries] = useState({\n\t\tkey: '',\n\t\tlist: []\n\t})\n\n\tuseEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\ttry {\n\t\t\t\tlet response = await fetch(COUNTRIES_API_URL)\n\t\t\t\tlet jsonResponse = await response.json()\n\t\t\t\tsetCountries(jsonResponse)\n\t\t\t\tsetFilteredCountries({ key: '', list: jsonResponse })\n\t\t\t\tsetLoading(false)\n\t\t\t} catch (error) {\n\t\t\t\tsetErrorMessage(error.message)\n\t\t\t\tconsole.log(error)\n\t\t\t}\n\t\t}\n\n\t\tfetchData()\n\t}, [])\n\n\tconst search = (searchValue) => {\n\t\tlet countryList = countries.filter((country) =>\n\t\t\tcountry.name.toLowerCase().includes(searchValue.toLowerCase())\n\t\t)\n\t\tsetFilteredCountries({ key: searchValue, list: countryList })\n\t\tsetErrorMessage(null)\n\t}\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Header text=\"Country directory\" />\n\t\t\t<Search search={search} />\n\t\t\t<p className=\"App-intro\">\n\t\t\t\t{filteredCountries && filteredCountries.key === ''\n\t\t\t\t\t? `Showing ${countries.length} countries`\n\t\t\t\t\t: `Searching countries including \"${filteredCountries.key}\" in their names`}\n\t\t\t</p>\n\t\t\t<div className=\"countries\">\n\t\t\t\t{loading && !errorMessage ? (\n\t\t\t\t\t<span>loading...</span>\n\t\t\t\t) : errorMessage ? (\n\t\t\t\t\t<div className=\"errorMessage\">{errorMessage}</div>\n\t\t\t\t) : (\n\t\t\t\t\tfilteredCountries.list.map((country) => (\n\t\t\t\t\t\t<Country key={country.numericCode} country={country} />\n\t\t\t\t\t))\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}